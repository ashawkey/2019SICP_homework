#lang racket
(define (pascal n)
  (define v (make-vector 101))
  (define nv (make-vector 101))
  (define (copy i l)
    (if (= i l)
        (void)
        (begin (vector-set! v i (vector-ref nv i)) (copy (+ i 1) l))))
  (define (line i l)
    (cond ((= i l) (begin (display 1) (newline) (vector-set! nv i 1)))
          ((= i 0) (begin (display 1) (display #\space) (vector-set! nv i 1) (line (+ i 1) l)))
          (else (let ((tmp (+ (vector-ref v i) (vector-ref v (- i 1))))) (display tmp) (display #\space) (vector-set! nv i tmp) (line (+ i 1) l)))))
  (define (loop i)
    (if (= i n)
        (void)
        (begin (line 0 i) (copy 0 (+ i 1)) (loop (+ i 1)))))
  (loop 0))

(define (main n)
  (if (eq? n eof)
      (void)
      (begin (pascal n) (main (read)))))

(main (read))