#lang racket
(define (A)
  (define x -1)
  (lambda (f)
    (cond ((eq? f 'setx) (lambda (v) (cond ((= x -1) (displayln "object hasn't been constructed!"))
                                           ((= x -2) (displayln "object has been destructed!"))
                                           (else (set! x v)))))
          ((eq? f 'getx) (cond ((= x -1) (displayln "object hasn't been constructed!"))
                               ((= x -2) (displayln "object has been destructed!"))
                               (else x)))
          ((= x -2) (displayln "object has been destructed!"))
          ((= x -1) (set! x f))
          (else (displayln "object has been constructed!")))))

(define (delete a)
  ((a 'setx) -2))
(define a (A))
(a 2)
(a 4)
(display (a 'getx))
(newline)
((a 'setx) 1)
(display (a 'getx))
(newline)
(define b (A))
((b 'setx) 2)
(b 5)
(display (b 'getx))
(newline)
(delete a)
(delete b)
(delete a)
(b 'getx)