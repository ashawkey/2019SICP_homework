#lang racket
(define (main)
  (define v (make-vector 101))
  (define (input v idx num)
    (if (eq? num eof)
        idx
        (begin (vector-set! v idx num) (input v (+ idx 1) (read)))))
  (define (bubble-sort v start cur end)
    (cond ((= start end) (void))
          ((= cur end) (bubble-sort v start start (- end 1)))
          (else (if (> (vector-ref v cur) (vector-ref v (+ cur 1)))
                    (begin (let ((tmp (vector-ref v cur))) (vector-set! v cur (vector-ref v (+ cur 1))) (vector-set! v (+ cur 1) tmp))
                           (bubble-sort v start (+ cur 1) end))
                    (bubble-sort v start (+ cur 1) end)))))
  (define (print v f t)
    (cond ((= f t) (newline))
          ((= f 0) (begin (display (vector-ref v f)) (display #\space) (print v (+ f 1) t)))
          (else (if (= (vector-ref v f) (vector-ref v (- f 1)))
                    (print v (+ f 1) t)
                    (begin (display (vector-ref v f)) (display #\space) (print v (+ f 1) t))))))
  (define len (input v 0 (read)))
  (bubble-sort v 0 0 (- len 1))
  (print v 0 len)
  )
(main)